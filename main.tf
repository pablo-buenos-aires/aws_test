# ------------------------------------------------------------------------------- /modules
module "vpc" {
  source              = "./modules/vpc"
  #vpc_name            = "test_vpc"
  vpc_cidr            = "10.0.0.0/16"
  public_subnet_cidr =  "10.0.1.0/24"
  private_subnet_cidrs = ["10.0.2.0/24", "10.0.3.0/24"] # –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥—Å–µ—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Å–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ azs
  vpc_azs = ["sa-east-1a", "sa-east-1b"] # –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–∑—å–º–µ—Ç—Å—è —Ä–µ–≥–∏–æ–Ω –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ssm
}

# ------------------------------------------------------------------------------------------- –∫–ª—é—á–∏
resource "tls_private_key" "ssh_key" { # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
	algorithm = "RSA" 
	rsa_bits  = 2048 
	}

resource "aws_key_pair" "ssh_aws_key" {  # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª—é—á

  	public_key = tls_private_key.ssh_key.public_key_openssh # –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ Openssh
    key_name   = "tf-ssh-key" # –±–µ–∑ —ç—Ç–æ–≥–æ –Ω–µ —Å–≤—è–∑—ã–≤–∞–µ—Ç –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

}

resource "local_file" "file_ssh_priv" { # –±–µ–∑ provisioner ‚Äî —á–µ—Ä–µ–∑ local_file
  content         = tls_private_key.ssh_key.private_key_pem
  filename        = "${path.module}/ssh-key.pem"
  file_permission = "0400"
}

resource "local_file" "file_ssh_pub" {
  content  = tls_private_key.ssh_key.public_key_openssh
  filename = "${path.module}/ssh-key.pub"
}
# --------------------------------------------------------------------------------------- –∏–Ω—Å—Ç–∞–Ω—Å—ã

resource "aws_instance" "pub_ubuntu" { # —Å–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å
  #ami                    = data.aws_ami.ubuntu_24.id
  ami = "ami-0cdd87dc388f1f6e1"
  instance_type          = var.t3
  subnet_id              = module.vpc.public_subnet_id # –≤ –ø—É–±–ª–∏—á–Ω–æ–π –ø–æ–ª–¥—Å–µ—Ç–∏
  vpc_security_group_ids = [module.vpc.public_sg_id] # –≥—Ä—É–ø–ø–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  key_name               = aws_key_pair.ssh_aws_key.key_name # —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤—ã—à–µ SSH –∫–ª—é—á
  associate_public_ip_address = true # –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP
  source_dest_check = false #n —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª NAT

  iam_instance_profile = aws_iam_instance_profile.ssm_profile.name # –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç —Ä–æ–ª–∏ SSM

  # user_data = file("${path.module}/user_data_public.sh")
  # –≤ –æ–±—Ä–∞–∑–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Ñ—Ç
  user_data =  <<EOF
# –í–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –∏ –¥–µ–ª–∞–µ–º —ç—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º
sysctl -w net.ipv4.ip_forward=1
echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/99-nat.conf #  reboot-safe
sysctl --system

# CIDR –ø–æ–¥—Å—Ç–∞–≤–∏—Ç terraform
VPC_CIDR="${module.vpc.vpc_cidr}"

# –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –±–µ—Ä—ë–º –≤–Ω–µ—à–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ default route (IPv4)
EXT_IF="$(ip -o -4 route show to default | awk '{print $5}' | head -n1)"

# –î–æ–±–∞–≤–ª—è–µ–º MASQUERADE, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
if ! iptables -t nat -C POSTROUTING -s "$VPC_CIDR" -o "$EXT_IF" -j MASQUERADE 2>/dev/null; then
  iptables -t nat -A POSTROUTING -s "$VPC_CIDR" -o "$EXT_IF" -j MASQUERADE
fi
#
netfilter-persistent save
systemctl enable --now netfilter-persistent
EOF
}
# ---------------------------------------------------------- –¥–≤–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∑–æ–Ω–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
# —à–∞–±–ª–æ–Ω –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–¥—Å–µ—Ç—è–º
resource "aws_launch_template" "l_templ" {
  name_prefix = "l-templ-1"
  image_id    = data.aws_ami.ubuntu_24.id
  instance_type = var.t3
  key_name = aws_key_pair.ssh_aws_key.key_name
 # –Ω—É–∂–µ–Ω –±–ª–æ–∫
  iam_instance_profile { name = aws_iam_instance_profile.ssm_profile.name }
  vpc_security_group_ids = [module.vpc.private_sg_id]

  #network_interfaces { security_groups = [aws_security_group.private_sg.id] }
}
# -------------------------------------------------------------------------- Asg
resource "aws_autoscaling_group" "priv_asg" {
  name                      = "priv-asg"
  min_size                  = 2
  desired_capacity          = 2
  max_size                  = 2
  health_check_type         = "EC2" # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞
  health_check_grace_period = 120 # –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ç, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  capacity_rebalance        = true # –µ—Å–ª–∏ –∑–æ–Ω–∞ –æ—Ç–≤–∞–ª–∏—Ç—Å—è, –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–¥–µ–ª–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å—ã

  wait_for_capacity_timeout = "10m" # –¥–ª—è —Ç–µ—Ä—Ä–∞—Ñ–æ—Ä–º, —á—Ç–æ–±—ã  –æ–∂–∏–¥–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ asg –≤ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  # –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–¥—Å–µ—Ç–∏!! (subnets_id, –Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏). –ö–∞–∂–¥–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Ç—å –≤ —Å–≤–æ–µ–π –∑–æ–Ω–µ
  vpc_zone_identifier = [for s in module.vpc.private_subnet_ids : s]

  # –ø—Ä–∏–≤—è–∑–∫–∞ Launch Template
  launch_template {
    id      = aws_launch_template.l_templ.id
    version = aws_launch_template.l_templ.latest_version
  }
  # –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–Ω—Å—Ç–∞–Ω—Å—ã –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏
  termination_policies = ["OldestInstance", "ClosestToNextInstanceHour"] # —Å—Ç–∞—Ä—ã–µ –∏ –≥–¥–µ –æ–ø–ª–∞—á–µ–Ω—ã–µ —á–∞—Å—ã –º–µ–Ω—å—à–µ

  depends_on = [ module.vpc]         # —á—Ç–æ–±—ã SSM —Ä–∞–±–æ—Ç–∞–ª

}
/*
# Null resource, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–∏—Å–∏–º –æ—Ç ASG, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É AWS CLI
resource "null_resource" "get_priv_instances" {
  depends_on = [aws_autoscaling_group.priv_asg]

  provisioner "local-exec" {
    command = <<EOT
      aws autoscaling describe-auto-scaling-groups \
        --auto-scaling-group-names ${aws_autoscaling_group.priv_asg.name} \
        --query 'AutoScalingGroups[0].Instances[*].InstanceId' \
        --output json > asg_instances.json
    EOT
  }
} */

resource "terraform_data" "get_priv_instances" {
  # üîÅ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ –∫–∞–∂–¥–æ–º –ø–ª–∞–Ω–µ/–∞–ø–ª–∞–µ
  triggers_replace = timestamp()  # <<< –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π apply => —Ä–µ—Å—É—Ä—Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç—Å—è
  depends_on = [aws_autoscaling_group.priv_asg]

  provisioner "local-exec" {
    interpreter = ["/bin/bash", "-lc"] # –±–µ–∑ —ç—Ç–æ–≥–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—É –∫–æ–º–∞–Ω–¥—ã
    command = <<EOT
set -euo pipefail
aws autoscaling describe-auto-scaling-groups \
  --auto-scaling-group-names "${aws_autoscaling_group.priv_asg.name}" \
  --query 'AutoScalingGroups[0].Instances[*].InstanceId' \
  --output json > asg_instances.json
EOT
  }
}

#--------------------------------------------------------------------------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSM –¥–ª—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
resource "aws_iam_role" "ssm_role" { # —Ä–æ–ª—å —Å–æ–∑–¥–∞–µ–º
  name = "ssm_role_name"
  assume_role_policy = jsonencode({  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON –¥–ª—è –∞–º–∞–∑–æ–Ω
    Version = "2012-10-17" # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    Statement = [{  #  —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª
      Action    = "sts:AssumeRole"
      Effect = "Allow"
      Principal = { Service = "ec2.amazonaws.com" } # –∫—Ç–æ –º–æ–∂–µ—Ç —ç—Ç—É —Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –≤ —Ç.—á –∏–Ω—Å—Ç–∞–Ω—Å—ã ec2s

    }]
  })
}

resource "aws_iam_role_policy_attachment" "ssm_core" { # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫ —Ä–æ–ª–∏ –¥–ª—è SSM –¥–ª–æ—Å—Ç—É–ø–∞
  role       = aws_iam_role.ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_instance_profile" "ssm_profile" { # –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –±–∞–∑–µ —Ä–æ–ª–∏, –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∏–Ω—Å—Ç–∞–Ω—Å–∞–º
  name = "ssm_profile_name"
  role = aws_iam_role.ssm_role.name
}

